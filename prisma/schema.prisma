generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Module {
  moduleId           String              @id @default(uuid())
  userId             String
  title              String
  description        String?
  imageUrl           String?
  isPublished        Boolean             @default(false)
  subjectId          String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  attachments        Attachment[]
  assignments        Assignment[]
  studentSubmissions StudentAttachment[]
  subject            Subject?            @relation(fields: [subjectId], references: [subjectId])
}

model StudentAttachment {
  submissionId String   @id @default(uuid())
  studentId    String
  moduleId     String
  name         String
  url          String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  module       Module   @relation(fields: [moduleId], references: [moduleId], onDelete: Cascade)

  @@index([moduleId])
  @@index([studentId])
}

model Subject {
  subjectId String   @id @default(uuid())
  name      String   @unique
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  modules   Module[]
}

model Attachment {
  attachmentId String   @id @default(uuid())
  name         String
  url          String
  moduleId     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  module       Module   @relation(fields: [moduleId], references: [moduleId], onDelete: Cascade)

  @@index([moduleId])
}

model Assignment {
  assignmentId String   @id @default(uuid())
  name         String
  url          String
  moduleId     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  module       Module   @relation(fields: [moduleId], references: [moduleId], onDelete: Cascade)

  @@index([moduleId])
}

model Profile {
  id        String     @id @default(uuid())
  userId    String     @unique
  name      String
  imageUrl  String?
  email     String
  role      MemberRole @default(STUDENT)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

enum MemberRole {
  ADMIN
  TEACHER
  STUDENT
}
